# -*- coding: utf-8 -*-
"""Studentperformance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xPcB400UTTFV-HnW7g5F9tArCXwW7UEi
"""

!pip install pandas numpy scikit-learn matplotlib seaborn openpyxl

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sb
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error as mse_score, r2_score

file_path = "/content/drive/MyDrive/APRdata/StudentPerformanceFactors.xlsx"
df = pd.read_excel(file_path)

print("Preview of the dataset:\n")
print(df.head())
print("\n--- Dataset Information ---\n")
df.info()

print("\n--- Missing Values in Each Column ---\n")
print(df.isnull().sum())

print("\n--- Descriptive Statistics ---\n")
print(df.describe())

plt.figure(figsize=(12, 6))
sb.heatmap(df.corr(numeric_only=True), annot=True, cmap="coolwarm", linewidths=0.5)
plt.title("Correlation Heatmap of Student Factors", fontsize=14)
plt.show()

target = "Exam_Score"
features = df.drop(columns=[target])  # independent variables
y = df[target]
features_encoded = pd.get_dummies(features, drop_first=True)

print("\nEncoded features sample:\n")
print(features_encoded.head())
X_train, X_test, y_train, y_test = train_test_split(
    features_encoded, y, test_size=0.2, random_state=42
)

print(f"\nTraining set shape: {X_train.shape}")
print(f"Testing set shape: {X_test.shape}")

lr_model = LinearRegression()
lr_model.fit(X_train, y_train)
predicted_scores = lr_model.predict(X_test)

mse_val = mse_score(y_test, predicted_scores)
rmse_val = np.sqrt(mse_val)
r2_val = r2_score(y_test, predicted_scores)

print("\n--- Model Performance Metrics ---")
print(f"Mean Squared Error      : {mse_val:.2f}")
print(f"Root Mean Squared Error : {rmse_val:.2f}")
print(f"RÂ² Score                : {r2_val:.2f}")

plt.figure(figsize=(8, 6))
plt.scatter(y_test, predicted_scores, c="blue", edgecolors="k", alpha=0.7)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()],
         'r--', lw=2, label="Ideal Fit")
plt.xlabel("Actual Exam Scores")
plt.ylabel("Predicted Exam Scores")
plt.title("Comparison of Actual vs Predicted Scores")
plt.legend()
plt.grid(True)
plt.show()
coef_df = pd.DataFrame({
    "Feature": features_encoded.columns,
    "Weight": lr_model.coef_
}).sort_values(by="Weight", ascending=False)

print("\n--- Feature Importance ---\n")
print(coef_df)

plt.figure(figsize=(10, 6))
sb.barplot(y="Feature", x="Weight", data=coef_df, palette="coolwarm")
plt.title("Most Influential Features in Prediction", fontsize=14)
plt.show()


# 1. Histogram of Exam Scores
plt.figure(figsize=(8, 5))
sb.histplot(y, kde=True, bins=18, color="teal")
plt.title("Distribution of Exam Scores", fontsize=14)
plt.xlabel("Exam Score")
plt.ylabel("Frequency")
plt.show()

# 2. Boxplot for outlier detection
plt.figure(figsize=(8, 5))
sb.boxplot(x=y, color="orange")
plt.title("Boxplot of Exam Scores", fontsize=14)
plt.xlabel("Exam Score")
plt.show()

# 3. Pairplot: Relationships between key continuous features
important_cols = ['Hours_Studied', 'Attendance', 'Previous_Scores', 'Sleep_Hours', 'Exam_Score']
sb.pairplot(df[important_cols], diag_kind='kde')
plt.suptitle("Pairplot of Key Features", y=1.02)
plt.show()

# 4. Residual plot
residuals = y_test - predicted_scores
plt.figure(figsize=(8, 5))
sb.scatterplot(x=predicted_scores, y=residuals, color='red', edgecolor='k')
plt.axhline(0, color='black', linestyle='--')
plt.xlabel("Predicted Scores")
plt.ylabel("Residuals")
plt.title("Residual Plot")
plt.show()

# 5. Density comparison of actual vs predicted
plt.figure(figsize=(8, 5))
sb.kdeplot(y_test, fill=True, color="blue", label="Actual")
sb.kdeplot(predicted_scores, fill=True, color="green", label="Predicted")
plt.title("Comparison of Predicted vs Actual Exam Score Distribution")
plt.xlabel("Exam Score")
plt.legend()
plt.show()

# 6. Average Exam Score by Gender
plt.figure(figsize=(10, 5))
sb.barplot(x='Gender', y='Exam_Score', data=df, ci=None, estimator=np.mean, palette='pastel')
plt.title("Average Exam Score by Gender")
plt.ylabel("Average Exam Score")
plt.show()

# 7. Average Exam Score by School Type
plt.figure(figsize=(10, 5))
sb.barplot(x='School_Type', y='Exam_Score', data=df, ci=None, estimator=np.mean, palette='muted')
plt.title("Average Exam Score by School Type")
plt.ylabel("Average Exam Score")
plt.show()